from django.contrib import messagesfrom django.contrib.auth.decorators import login_requiredfrom django.shortcuts import redirectfrom django.urls import reversefrom django.views.decorators.http import require_POSTfrom django.views.generic import ListViewfrom django.views.generic.detail import SingleObjectMixinfrom django.utils.translation import gettext_lazy as _from tweepy import TweepErrorfrom ..models import PythonTipHashTag, TweeCryptfrom ..services import TweepyServiceclass SearchTweet:    passTEMPLATE_URL = 'apps/twee/tip'class ListTipByHashTag(SingleObjectMixin, ListView):    template_name = f'{TEMPLATE_URL}/tips_by_hash_tag.html'    slug_field = 'name__iexact'    slug_url_kwarg = 'hash_tag'    paginate_by = 12    def get(self, request, *args, **kwargs):        self.object = super().get_object(PythonTipHashTag.objects.all())        return super().get(request, *args, **kwargs)    def get_context_data(self, **kwargs):        context = super().get_context_data(**kwargs)        context['hash_tag'] = self.object        context['notice_message'] = 'You are viewing DailyPython tips that has #%s' % self.object.name        return context    def get_queryset(self):        return self.object.tips.all()@require_POST@login_requireddef retweet_post(request):    tweet_id = request.POST.get('tweet_id')    try:        crypt = TweeCrypt.objects.get(id=1)        api = TweepyService(            crypt.consumer_key,            crypt.consumer_secret,            crypt.access_token,            crypt.access_token_secret        )        try:            user = api.get_user            if user.verify_credentials():                user.retweet(tweet_id)                messages.success(request, _('Successfully made a retweet'))        except TweepError as e:            messages.error(request, _(e))    except TweeCrypt.DoesNotExist:        messages.error(request, _('Token table not yet created'))    return redirect(reverse('tweeapps:twee:home'))