import loggingfrom apscheduler.schedulers.background import BackgroundSchedulerfrom apscheduler.triggers.cron import CronTriggerfrom django.conf import settingsfrom django.core.management.base import BaseCommandfrom django_apscheduler.jobstores import DjangoJobStorefrom django_apscheduler.models import DjangoJobExecutionfrom ...models import TweeCrypt, PythonTipLink, PythonTip, PythonTipTweetUser, PythonTipHashTagfrom ...services import TweepyServicelogger = logging.getLogger(__name__)def get_tweets():    try:        api = TweeCrypt.objects.get(id=1)    except TweeCrypt.DoesNotExist:        pass    consumer_key = api.consumer_key or 'xxxxxx'    consumer_secret = api.consumer_secret or 'xxxxxxxxxxxxxx'    access_token = api.access_token or 'xxxxxxxxxxxxxxxxxxxxx'    access_token_secret = api.access_token_secret or 'zzzzzzzzzzzzzzzzzzzzzzzzz'    auth = TweepyService(consumer_key, consumer_secret, access_token, access_token_secret)    tweets = auth.get_user_tweets('python_tip')    for tweet in tweets:        insert_to_db(tweet)def insert_to_db(tweet):    id = tweet.id    full_text = tweet.full_text    date_created = tweet.created_at    num_of_retweets = tweet.retweet_count    num_of_likes = tweet.favorite_count    user_obj = tweet.user    try:        user = PythonTipTweetUser.objects.get(user_id=user_obj.id)    except PythonTipTweetUser.DoesNotExist:        user = PythonTipTweetUser.objects.create(            user_id=user_obj.id,            display_name=user_obj.name,            username=user_obj.screen_name        )    entities = tweet.entities    hashtags = [hashtag['text'] for hashtag in entities['hashtags']]    tip, created = PythonTip.objects.update_or_create(        tweet_id=id,        tweeted_by=user,        tip=full_text,        likes=num_of_likes,        retweets=num_of_retweets,        timestamp=date_created,    )    urls = [url['url'] for url in entities['urls']]    if hashtags:        for h in hashtags:            t = PythonTipHashTag(name=h)            t.save()            tip.hash_tags.add(t)    if urls:        for url in urls:            PythonTipLink.objects.update_or_createdef delete_old_job_executions(max_age=604_800):    """This job deletes all apscheduler job executions older than `max_age` from the database."""    DjangoJobExecution.objects.delete_old_job_executions(max_age)class Command(BaseCommand):    help = 'Runs apscheduler.'    def handle(self, *args, **options):        scheduler = BackgroundScheduler(timezone=settings.TIME_ZONE)        scheduler.add_jobstore(DjangoJobStore(), 'default')        scheduler.add_job(            get_tweets,            trigger=CronTrigger(second='*/10'),  # Every 10 seconds            id='my_job',  # The `id` assigned to each job MUST be unique            max_instances=1,            replace_existing=True,        )        logger.info('Added job \'my_job\'.')        scheduler.add_job(            delete_old_job_executions,            trigger=CronTrigger(                day_of_week='mon', hour='00', minute='00'            ),  # Midnight on Monday, before start of the next work week.            id='delete_old_job_executions',            max_instances=1,            replace_existing=True,        )        logger.info(            'Added weekly job: \'delete_old_job_executions\'.'        )        try:            logger.info('Starting scheduler...')            scheduler.start()        except KeyboardInterrupt:            logger.info('Stopping scheduler...')            scheduler.shutdown()            logger.info('Scheduler shut down successfully!')